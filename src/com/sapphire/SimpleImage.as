package com.sapphire{	import com.sapphire.core.CacheType;	import com.sapphire.core.MaterialCache;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.system.Capabilities;	import flash.system.LoaderContext;	import flash.utils.ByteArray;
		public class SimpleImage extends Sprite {		public function SimpleImage() {			// constructor code			if ('loadingSprite' in this)				this['loadingSprite'].visible = false;		}				private var _loader:Loader;				private var _bitmapContent:Bitmap;				private var _imageWidth:Number;		private var _imageHeight:Number;				private var _defaultWidth:Number = 10;		private var _defaultHeight:Number = 10;				private var _scaleToFit:Boolean = true;				private var _fitWidth:Boolean = true;				private var _fitHeight:Boolean = false;				private var _exactFit:Boolean = true;		//=================================================================		//		// Override Properties		//		//=================================================================				//=================================================================		//		// Properties		//		//=================================================================		private var _source:Object;		public function get source():Object		{			return _source;		}				public function set source(value:Object):void		{			if (_source == value) return;						if (_source)			{				//hide loading sprite				toggleLoadingSprite(false);				//show default avatar				//remove previous content				if (_loader)				{					_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadContentComplete);					_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIoError);					try {						if (_loader.content && this.contains(_loader.content))						{							this.removeChild(_loader.content);												}					}					catch (e:Error)					{											}										_imageWidth = 0;					_imageHeight = 0;					_loader = null;				}								if (_bitmapContent)				{					if (this.contains(_bitmapContent))						removeChild(_bitmapContent);					_imageWidth = 0;					_imageHeight = 0;					_bitmapContent.bitmapData = null;					_bitmapContent = null;														}							}								_source = value;						if (_source)			{								//hide default avatar				toggleDefaultAvatar(false);				if (_source is String && String(_source) != '')				{					//load cache					if (cacheContent)					{						if (MaterialCache.getInstance().hasKey(_source as String))						{							var cached:Object = MaterialCache.getInstance().getMaterial(String(_source));							if (cached is ByteArray)							{								_loader = new Loader();								_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadContentComplete, false, 0, true);								_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIoError, false, 0, true);								_loader.loadBytes( ByteArray(cached) );							}							else if (cached is BitmapData)							{								_bitmapContent = new Bitmap(BitmapData(cached));								_bitmapContent.smoothing = true;																addContent(_bitmapContent as DisplayObject);							}							return;						}					}										//ko có content trong cache										_loader = new Loader();					var loaderContext:LoaderContext = new LoaderContext();					loaderContext.checkPolicyFile = true;					_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadContentComplete, false, 0, true);					_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIoError, false, 0, true);					_loader.load(new URLRequest(String(_source)),loaderContext);										//hide default avatar					toggleDefaultAvatar(false);					//show loading animation					toggleLoadingSprite(true);				}				else if (_source is ByteArray)				{										_loader = new Loader();					_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadContentComplete, false, 0, true);					_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIoError, false, 0, true);					_loader.loadBytes(ByteArray(_source));				}				else if (_source is BitmapData)				{					_bitmapContent = new Bitmap(_source as BitmapData);					_bitmapContent.smoothing = true;					addContent(DisplayObject(_bitmapContent));				}			}			else {				//show default avatar				toggleDefaultAvatar(true);			}		}				private function toggleDefaultAvatar(on:Boolean = false):void {			//show default image			if ('defaultAvatarSprite' in this)				Sprite(this['defaultAvatarSprite']).visible = on;		}				private function toggleLoadingSprite(on:Boolean = false):void {			//show loading animation			if ('loadingSprite' in this)				this['loadingSprite'].visible = on;		}				public function get imageWidth():Number		{			return _imageWidth;		}				public function get imageHeight():Number		{			return _imageHeight;		}				public function get scaleToFit():Boolean		{			return _scaleToFit;		}				public function set scaleToFit(value:Boolean):void		{			this._scaleToFit = value;		}				public function get defaultWidth():Number		{			return _defaultWidth;		}		public function set defaultWidth(value:Number):void		{			_defaultWidth = value;		}				public function get defaultHeight():Number		{			return _defaultHeight;		}				public function set defaultHeight(value:Number):void		{			_defaultHeight = value;		}				private var _cacheContent:Boolean = false;		public function get cacheContent():Boolean
		{
			return _cacheContent;
		}		public function set cacheContent(value:Boolean):void
		{
			_cacheContent = value;
		}				private var _cacheType:String = CacheType.BYTE_ARRAY;		public function get cacheType():String
		{
			return _cacheType;
		}		public function set cacheType(value:String):void
		{
			_cacheType = value;
		}		//=================================================================		//		// Event handlers		//		//=================================================================		protected function loadContentComplete(event:Event):void		{			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadContentComplete);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIoError);			//hide loading sprite			toggleLoadingSprite(false);						try			{				//cho vào cache				if (cacheContent)				{					if (_source is String)					{						if (_cacheType == CacheType.BYTE_ARRAY)							MaterialCache.getInstance().push(_loader.contentLoaderInfo.bytes,_source as String);						else if (_cacheType == CacheType.DISPLAY_OBJECT)							MaterialCache.getInstance().push(_loader.content,_source as String);						else if (_cacheType == CacheType.BITMAP_DATA)						{							if (_loader.content is Bitmap)								MaterialCache.getInstance().push(Bitmap(_loader.content).bitmapData,_source as String);						}					}				}								if (_loader.content is Bitmap)					Bitmap(_loader.content).smoothing = true;								addContent(_loader.content);			}			catch (e:Error)			{				trace(e.name + " : " + e.message); 				if (Capabilities.cpuArchitecture != 'ARM') {					throw (e);				}			}		}				protected function onIoError(event:IOErrorEvent):void		{			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadContentComplete);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIoError);						//hide loading sprite			toggleLoadingSprite(false);			//show default avatar			toggleDefaultAvatar(true);		}				protected function addContent(content:DisplayObject):void		{			if (content is Bitmap)				Bitmap(content).smoothing = true;						_imageWidth = content.width;			_imageHeight = content.height;						/*trace('[BitmapImage][onLoadContentComplete] imageWidth: ' + _imageWidth);			trace('[BitmapImage][onLoadContentComplete] imageHeight: ' + _imageHeight);			trace('[BitmapImage][onLoadContentComplete] defaultWidth: ' + _defaultWidth);			trace('[BitmapImage][onLoadContentComplete] defaultHeight: ' + _defaultHeight);*/									if (this.width <= _defaultWidth || this.height <= _defaultHeight)			{				this.graphics.clear();				this.graphics.beginFill(0x666666,1);				this.graphics.drawRect(0,0,Math.max(this.width, _defaultWidth), Math.max(this.height, _defaultHeight));				this.graphics.endFill();			}						var ratio:Number;						if (_exactFit)			{				content.width = Math.max(this.width,_defaultWidth);				content.height = Math.max(this.height, _defaultHeight);			}			else if (_fitWidth)			{				ratio = Math.max(this.width,_defaultWidth) / _imageWidth;				content.scaleX = content.scaleY = ratio;			}			else if (_scaleToFit)			{				var wRatio:Number = Math.max(this.width, _defaultWidth) / _imageWidth;				var hRatio:Number = Math.max(this.height, _defaultHeight) / _imageHeight;								ratio = Math.min(wRatio,hRatio);								content.scaleX = content.scaleY = ratio;			}						content.x = (Math.max(this.width, _defaultWidth) - content.width) / 2;			content.y = (Math.max(this.height, _defaultHeight) - content.height) / 2;						this.addChild(content);						//hide default avatar			toggleDefaultAvatar(false);			//hide loading sprite			toggleLoadingSprite(false);		}	}	}